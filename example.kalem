// required_flag just defines file type,
// for source file it's not required.
!required_flag("source")

#import <ios>
#import <stdstr>

// Disable hash cache checker for test.kalem, etc...
!flag("hash-cache=false")

// Some of Kalem's runtime flags.
!flag("output=testikebabi")
!flag("cpp-standard=c++2a")
!flag("cpp-output=true")
!flag("cpp-sysroot=false")

// default=clang
!flag("cpp-compiler=default")

// Its type is not boolean.
!flag("cpp-flags=false")

!include_dir("./include/libs/")
!include_dir("./")

// TODO: Set STL directory default, 
// add 'kalem-stl' runtime flag.

!add_source("test")

// TODO: For STL files, make it automatically.
!add_source("/usr/include/kalem/stl/variables")
!add_source("/usr/include/kalem/stl/math")
!add_source("/usr/include/kalem/stl/tools")

#import <StringTools.hpp>

// import <test.kalem>
#include <test>

// STL files
#include <variables>
#include <math>
#include <tools>

#defn LOWERCASE_A 'a'
#defn UPPERCASE_A 'A'

@my_class class {
~public
    @another_my_class_function void {
        @print "Hi from my_class!\n"
        @print test
        @print test_protected
    }
~private
    string test "Hi from my_class as private member!\n"

~protected
    string test_protected "Hi from my_class as protected member!\n"
}

@my_namespace namespace {
    @another_my_function(string test) void {
        @print "Hi, "
        @print test
    }
}

@my_function(string name) void {
    @print name
}

@my_test_function void {
    @print "Test\n"
}

@main int {
    string test "[Hello, Kalem!]\n"
    str my_str_test "Hello str!\n"

    // Kalem does not support class declaring and
    // user-defined variables yet.
    #my_class myclass;

    #i16 int16_test = 16;
    #u32 uint32_test = 32;

    int _test 10
    unsign _test_ 20

    @print "String: "
    @print test

    @print "\nInteger: "
    @print _test

    @print "\nUnsigned Integer: "
    @print _test_

    @print "\n"

    @my_function("Hi, from Kalem!\n")

    @my_test_function

    @my_test_function()

    #/* You can use directly C++ & C code with # token like this too.  */
    @my_namespace::another_my_function("Hi, C++!\n")
	
    @test: @print "argc: "

    ++_test
    
    @print argc
    
    @print "\nargv[argc]: "
    @print argv[argc-1]
    @print "\n"

    
    if (_test == 11) {
    	@print "Passed [11]\n"
    } elsif (_test != 12) {
        @goto test
    } els {
    	@print "Passed : "
    	@print _test
    	@print "\n"
    }

    int i 0

    loop {
        @print "Hello, world!\n"
        i++

        if (i == 2) {
            break
        }
    }

    // Call C++ namespace directly from Kalem.
    #test = stringtools::GetBetweenString(test, "[", "]");

    @print "StringTools: "
    @print test
    @print "\n"

    @my_test

    @myclass.another_my_class_function()

    @print my_str_test

    @print "uint32_test : "
    @print uint32_test
    @print "\n"

    @print "int16_test : "
    @print int16_test
    @print "\n"

    @print "factorial(7) : "
    @print math::factorial(7)
    @print "\n"

    @print "log2(32) : "
    @print math::binary_log2(32)
    @print "\n"

    // Base = 10 logarithm
    @print "log(32) : "
    @print math::log(32,10)
    @print "\n"

    @print "abs(-2021) : "
    @print math::abs(-2021)
    @print "\n"

    char lowercase_a 'a'

    @print "lowercase_a : a\n"
    @print "to_upper(lowercase_a) : "

    @lowercase_a=tools::toupper(lowercase_a)

    @print lowercase_a
    @print "\n"

    @print "Character: "

    switch (lowercase_a) {
        ~LOWERCASE_A {
            @print "LOWERCASE_A"
            break
        }

        ~UPPERCASE_A {
            @print "UPPERCASE_A"
            break
        }

        ~default {
            @print "Undefined"
            break
        }
    }

    @print "\n"

    @return 0
}
